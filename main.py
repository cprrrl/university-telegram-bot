from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import os

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤ ---
def load_data():
    with open('schedule.json', 'r', encoding='utf-8') as f:
        schedule_data = json.load(f)
    with open('subjects.json', 'r', encoding='utf-8') as f:
        subjects_data = json.load(f)
    return schedule_data['times'], schedule_data['weekly'], subjects_data

schedule_times, weekly_schedule, subjects_info = load_data()

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
from telegram import ReplyKeyboardMarkup, KeyboardButton

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("/schedule"), KeyboardButton("/subject")],
        [KeyboardButton("/day")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=reply_markup
    )

async def send_schedule_times(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n\n"
    for s in schedule_times:
        msg += f"{s['pair']}. ‚è∞ {s['start']} - {s['end']}\n"
    await update.message.reply_text(msg)

async def send_subject_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä: /–ø—Ä–µ–¥–º–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
        return

    search_term = " ".join(context.args).strip().lower()  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    found_subjects = []

    # –ò—â–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å search_term
    for subject_name, info in subjects_info.items():
        if search_term in subject_name.lower():
            found_subjects.append({
                "name": subject_name,
                "cabinet": info["cabinet"],
                "floor": info["floor"],
                "teacher": info["teacher"]
            })

    if not found_subjects:
        await update.message.reply_text(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_term}'")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if len(found_subjects) == 1:
        subj = found_subjects[0]
        msg = (
            f"üìò {subj['name']}\n"
            f"üö™ –ö–∞–±–∏–Ω–µ—Ç: {subj['cabinet']}\n"
            f"üè¢ –≠—Ç–∞–∂: {subj['floor']}\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {subj['teacher']}"
        )
    else:
        msg = f"üîé –ù–∞–π–¥–µ–Ω–æ {len(found_subjects)} –ø—Ä–µ–¥–º–µ—Ç(–æ–≤) –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}':\n\n"
        for subj in found_subjects:
            msg += (
                f"üìò {subj['name']}\n"
                f"   üö™ {subj['cabinet']}, üè¢ —ç—Ç–∞–∂ {subj['floor']}\n"
                f"   üë®‚Äçüè´ {subj['teacher']}\n\n"
            )

    await update.message.reply_text(msg)

async def send_daily_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü—Ä–∏–º–µ—Ä: /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        return

    day = " ".join(context.args).strip()
    schedule = weekly_schedule.get(day)

    if not schedule:
        await update.message.reply_text(f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ '{day}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã: –ü–Ω-–°–±.")
        return

    msg = f"üìÖ {day}\n\n"
    for lesson in schedule:
        pair_num = lesson["pair_num"]
        subject = lesson["subject"]
        time_info = next((t for t in schedule_times if t["pair"] == pair_num), None)
        time_str = f" ({time_info['start']}-{time_info['end']})" if time_info else ""
        msg += f"{pair_num}. {subject}{time_str}\n"

    await update.message.reply_text(msg)

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –ø–æ–º–æ—â–∏.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    # ‚ùó –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù –û–¢ @BotFather
    TOKEN = "8293794172:AAFMSj8KXWOsZhJE_Dgsouf47uDqKudIIyY"

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("schedule", send_schedule_times))
    application.add_handler(CommandHandler("subject", send_subject_info))
    application.add_handler(CommandHandler("day", send_daily_schedule))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()